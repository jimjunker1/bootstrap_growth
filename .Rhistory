spread(key = as.character(bodysize), value = n) -> df.wide
#widen it out
df %>%
group_by(SITE, DATE, HABITAT, SAMPLE, TAXON, bodysize) %>%
tally() %>%
spread(key = bodysize, value = n) -> df.wide
View(df.wide)
#widen it out
df %>%
group_by(SITE, DATE, HABITAT, SAMPLE, TAXON, bodysize) %>%
tally() %>%
spread(key = bodysize, value = n, fill = 0) -> df.wide
View(df.wide)
source("./len_freq_function.R")
source("./len_freq_function.R")
len_freq(df.wide)
len_freq(df.wide, FUN = median)
len_freq(df.wide, fun = median)
source("./len_freq_function.R")
len_freq(df.wide, fun = sum)
#Here is some script to run len_frequency histograms
##unfortunately have to switch the date format to a different one.
df = read.csv(file = "./infrequensMeasurements.csv", T)
#create some variables so don't have to F with len_freq code
df$Pd = as.POSIXct(df$date, format = "%d-%m-%y")
df$DATE = format(df$Pd, "%m/%d/%Y")
df$HABITAT = "COBBLE"
df$SAMPLE = "1"
df = df[,c(1,7:9,3:4)]
#change columns to fit code
colnames(df) = c("SITE", "DATE","HABITAT", "SAMPLE","TAXON","bodysize")
#widen it out
df %>%
group_by(SITE, DATE, HABITAT, SAMPLE, TAXON, bodysize) %>%
tally() %>%
spread(key = bodysize, value = n, fill = 0) -> df.wide
source("./ins_julian_function.txt")
source("./len_freq_function.R")
len_freq(df.wide, fun = sum)
ins_julian(df.wide, "df_wide")
df.julian = read.table(file ='./df_wide_julian.txt', header = T, sep = "\t", quote = "", strip.white = T,
check.names = F, row.names = NULL)
len_freq(df.julian, fun = sum)
warnings()
#run the code to estimate growth rates
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
#debugonce(cohort_boot)
tic()
# script to boot strap growth rates from size-frequency histograms
library(tidyverse);theme_set(theme_bw())
library(tictoc)
#run the code to estimate growth rates
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
#debugonce(cohort_boot)
tic()
suppressWarnings(cohort_boot(df))
toc()
#run the code to estimate growth rates
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
tic()
suppressWarnings(cohort_boot(df))
toc()
# script to boot strap growth rates from size-frequency histograms
library(tidyverse);theme_set(theme_bw())
library(tictoc)
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
#debugonce(cohort_boot)
tic()
suppressWarnings(cohort_boot(df))
toc()
#take a look at one example
x = read.csv(file = "./output/infrequens_site-1_IGR.csv",T)
x_1 = subset(x,site == 1 & start_date == "2017-08-18")
hist(x_1$IGR)
median(x_1$IGR)
quantile(x_1$IGR, c(0.05,0.95))
x_1 = subset(x,site == 1 & start_date == "2017-09-18")
log(5)/log(4)
log(5/4)
#take a look at one example
x = read.csv(file = "./output/infrequens_site-1_IGR.csv",T)
x_1 = subset(x,site == 1 & start_date == "2017-09-18")
unique(levels(x$start_date))
x_1 = subset(x,site == 1 & start_date == "2017-10-15")
hist(x_1$IGR)
##### some basic QAQC of data for my benefit #####
#read in file
df = read.csv(file = "./infrequensMeasurements.csv",T)
x = subset(df, Site == "1" & date == "15-10-17")
hist(x$bodySize, breaks = 30)
x_1 = subset(x,site == 1 & start_date == "2017-10-15")
#take a look at one example
x = read.csv(file = "./output/infrequens_site-1_IGR.csv",T)
unique(levels(x$start_date))
x_1 = subset(x,site == 1 & start_date == "2017-10-15")
hist(x_1$IGR)
x_1 = subset(x,site == 1 & start_date == "2017-11-19")
hist(x_1$IGR)
x = subset(df, Site == "1" & date == "19-11-17")
hist(x$bodySize, breaks = 30)
x_1 = subset(x,site == 1 & start_date == "2017-09-17")
hist(x_1$IGR)
#take a look at one example
x = read.csv(file = "./output/infrequens_site-1_IGR.csv",T)
x_1 = subset(x,site == 1 & start_date == "2017-09-17")
hist(x_1$IGR)
site_date = paste(x_1$site,"-",x_1$start_date)
site_date = paste(x_1$site,"-",x_1$start_date, sep = "")
site_date = paste(x_1$site,"_",x_1$start_date, sep = "")
df_int = data.frame(site_date = site_date, IGR = x_1$IGR)
f <-  function(u){
which.min(abs(as.numeric(u$vals) - 0.5))
}
ecdf.plot <- function(DATA)
{
x = sort(unique(DATA[,2]))
vals = cumsum(tabulate(match(DATA[,2] , unique(DATA[,2]))))/length(DATA[,2])
df = data.frame(x, vals)
ggplot(df, aes(x = vals, y = x)) + geom_point(size = 3, shape = 19, colour = "#999999") + geom_line(lwd = 1.2) +
labs(x = "Cumulative Frequency", y = "IGR (d-1)") + scale_y_continuous() +
geom_hline(yintercept = as.numeric(df$x[f(df)])) +
annotate("text", x = 0.12, y = 0.2, label = as.character(levels(droplevels(DATA$Stream)))) +
annotate("text", x = 0.12, y = 0.2, label = as.character(paste("igr50 = ",df$x[f(df)], sep = "")))
}
ecdf.plot(df_int)
# script to boot strap growth rates from size-frequency histograms
library(tidyverse);theme_set(theme_bw())
library(tictoc)
ecdf.plot(df_int)
ecdf.plot <- function(DATA)
{
x = sort(unique(DATA[,2]))
vals = cumsum(tabulate(match(DATA[,2] , unique(DATA[,2]))))/length(DATA[,2])
df = data.frame(x, vals)
ggplot(df, aes(x = vals, y = x)) + geom_point(size = 3, shape = 19, colour = "#999999") + geom_line(lwd = 1.2) +
labs(x = "Cumulative Frequency", y = "IGR (d-1)") + scale_y_continuous() +
geom_hline(yintercept = as.numeric(df$x[f(df)])) +
annotate("text", x = 0.12, y = 0.2, label = as.character(levels(droplevels(DATA$site_date)))) +
annotate("text", x = 0.12, y = 0.2, label = as.character(paste("igr50 = ",df$x[f(df)], sep = "")))
}
ecdf.plot(df_int)
ecdf.plot <- function(DATA)
{
x = sort(unique(DATA[,2]))
vals = cumsum(tabulate(match(DATA[,2] , unique(DATA[,2]))))/length(DATA[,2])
df = data.frame(x, vals)
ggplot(df, aes(x = vals, y = x)) + geom_point(size = 3, shape = 19, colour = "#999999") + geom_line(lwd = 1.2) +
labs(x = "Cumulative Frequency", y = "IGR (d-1)") + scale_y_continuous() +
geom_hline(yintercept = as.numeric(df$x[f(df)])) +
annotate("text", x = 0.25, y = 0.2, label = as.character(levels(droplevels(DATA$site_date)))) +
annotate("text", x = 0.25, y = 0.18, label = as.character(paste("igr50 = ",df$x[f(df)], sep = "")))
}
ecdf.plot(df_int)
#need to convert dates into POSIX format
df$Pd = as.POSIXct(df$date, format = "%d-%m-%y")
#just a quick visualization
ggplot(df, aes(x = Pd, y = mass, colour = as.factor(Site))) +
geom_point(size =2, position = "jitter")
x = subset(df, Site == "1" & date == "19-11-17")
hist(x$bodySize, breaks = 30)
#run the code to estimate growth rates
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
tic()
suppressWarnings(cohort_boot(df))
toc()
#take a look at one example
x = read.csv(file = "./output/infrequens_site-1_IGR.csv",T)
unique(levels(x$start_date))
x_1 = subset(x, site == 1 & start_date == "2017-09-17")
hist(x_1$IGR)
median(x_1$IGR)
quantile(x_1$IGR, c(0.05,0.95))
site_date = paste(x_1$site,"_",x_1$start_date, sep = "")
df_int = data.frame(site_date = site_date, IGR = x_1$IGR)
f <-  function(u){
which.min(abs(as.numeric(u$vals) - 0.5))
}
ecdf.plot <- function(DATA)
{
x = sort(unique(DATA[,2]))
vals = cumsum(tabulate(match(DATA[,2] , unique(DATA[,2]))))/length(DATA[,2])
df = data.frame(x, vals)
ggplot(df, aes(x = vals, y = x)) + geom_point(size = 3, shape = 19, colour = "#999999") + geom_line(lwd = 1.2) +
labs(x = "Cumulative Frequency", y = "IGR (d-1)") + scale_y_continuous() +
geom_hline(yintercept = as.numeric(df$x[f(df)])) +
annotate("text", x = 0.25, y = 0.2, label = as.character(levels(droplevels(DATA$site_date)))) +
annotate("text", x = 0.25, y = 0.18, label = as.character(paste("igr50 = ",df$x[f(df)], sep = "")))
}
ecdf.plot(df_int)
median(x_1$IGR)
#run the code to estimate growth rates
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
tic()
suppressWarnings(cohort_boot(df))
toc()
#take a look at one example
x = read.csv(file = "./output/infrequens_site-1_IGR.csv",T)
unique(levels(x$start_date))
x_1 = subset(x, site == 1 & start_date == "2017-09-17")
hist(x_1$IGR)
median(x_1$IGR)
quantile(x_1$IGR, c(0.05,0.95))
site_date = paste(x_1$site,"_",x_1$start_date, sep = "")
df_int = data.frame(site_date = site_date, IGR = x_1$IGR)
f <-  function(u){
which.min(abs(as.numeric(u$vals) - 0.5))
}
ecdf.plot <- function(DATA)
{
x = sort(unique(DATA[,2]))
vals = cumsum(tabulate(match(DATA[,2] , unique(DATA[,2]))))/length(DATA[,2])
df = data.frame(x, vals)
ggplot(df, aes(x = vals, y = x)) + geom_point(size = 3, shape = 19, colour = "#999999") + geom_line(lwd = 1.2) +
labs(x = "Cumulative Frequency", y = "IGR (d-1)") + scale_y_continuous() +
geom_hline(yintercept = as.numeric(df$x[f(df)])) +
annotate("text", x = 0.25, y = 0.2, label = as.character(levels(droplevels(DATA$site_date)))) +
annotate("text", x = 0.25, y = 0.18, label = as.character(paste("igr50 = ",df$x[f(df)], sep = "")))
}
ecdf.plot(df_int)
suppressWarnings(cohort_boot(df, nboot = 1000))
#take a look at one example
x = read.csv(file = "./output/infrequens_site-1_IGR.csv",T)
x_1 = subset(x, site == 1 & start_date == "2017-09-17")
hist(x_1$IGR)
quantile(x_1$IGR, c(0.0275,0.975))
median(x_1$IGR)
#need to convert dates into POSIX format
df$Pd = as.POSIXct(df$date, format = "%d-%m-%y")
#just a quick visualization
site1 = df[which(df$Site == "1"),]
ggplot(site1, aes(x = Pd, y = mass, colour = as.factor(Site))) +
geom_point(size =2, position = "jitter")
#just a quick visualization
site2 = df[which(df$Site == "2"),]
ggplot(site2, aes(x = Pd, y = mass, colour = as.factor(Site))) +
geom_point(size =2, position = "jitter")
#just a quick visualization
site3 = df[which(df$Site == "3"),]
ggplot(site3, aes(x = Pd, y = mass, colour = as.factor(Site))) +
geom_point(size =2, position = "jitter")
#just a quick visualization
site5 = df[which(df$Site == "5"),]
ggplot(site5, aes(x = Pd, y = mass, colour = as.factor(Site))) +
geom_point(size =2, position = "jitter")
df = read.csv(file = "./infrequensMeasurements.csv",T)
df$Pd = as.POSIXct(df$date, format = "%d-%m-%y")
site5 = df[which(df$Site == "5"),]
ggplot(site5, aes(x = Pd, y = log(mass), colour = as.factor(Site))) +
geom_point(size =2, position = "jitter")
df = read.csv(file = "./infrequensMeasurements.csv",T)
df$Pd = as.POSIXct(df$date, format = "%d-%m-%y")
df$julian = as.numeric(format(df$Pd, "%j"))
site5 = df[which(df$Site == "5"),]
ggplot(site5, aes(x = Pd, y = log(mass), colour = as.factor(Site))) +
geom_point(size =2, position = "jitter")
#reorder dates based start of cohort
site5 %>%
group_by(date) %>%
summarize(mean_mass = mean(mass, na.rm=T), julian = unique(julian, na.rm = T)) %>%
arrange(mean_mass) %>%
mutate(date = reorder(date, mean_mass)) %>%
mutate(day = c(diff(julian),NA), id = 1:n()) -> site5_df
#fix the weird wrap around dates
wrap_loc = which(site5_df$day < 0);wrap_fix = 365-abs(site5_df[which(site5_df$day < 0),'day'])
site5_df[wrap_loc, 'day'] = wrap_fix
View(site5_df)
site5_df %>%
mutate(cohort_day = c(0, cumsum(day, na.rm = T)))
site5_df %>%
mutate(cohort_day = c(0, cumsum(day)))
site5_df %>%
mutate(cohort_day = c(cumsum(day)))
site5_df %>%
mutate(cohort_day = c(cumsum(day))) ->site5_df
View(site5_df)
site5_df %>%
mutate(cohort_day = c(0, !is.na(cumsum(day)))) ->site5_df
cumsum(site5_df)
cumsum(site5_df$day)
!is.na(cumsum(site5_df$day))
site5_df %>%
mutate(cohort_day = c(0, subset(!is.na(cumsum(day))== TRUE))) ->site5_df
site5_df %>%
mutate(cohort_day = cumsum(day)) %>%
mutate(cohort_day = c(0,cohort_day[!is.na(cohort_day)]))->site5_df
View(site5_df)
View(site5_df)
View(site5)
site5 %>%
left_join(site5_df[,c('date','cohort_day')]) -> site5
ggplot(site5, aes(x = cohort_day, log(mass))) + geom_point(size = 2, position = 'jitter')
ggplot(site5, aes(x = cohort_day, log(mass))) + geom_point(size = 2, position = 'jitter') +
geom_smooth(span = 0.95)
ggplot(site5, aes(x = cohort_day, log(mass))) + geom_point(size = 2, position = 'jitter') +
geom_smooth(span = 0.9)
install.packages('stats4')
?mle
??mle
?mle2
?bbmle
#run the code to estimate growth rates
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
suppressWarnings(cohort_boot(df, nboot = 1000))
View(date.samp)
View(boot.data)
suppressWarnings(cohort_boot(df, nboot = 1000))
suppressWarnings(cohort_boot(df, nboot = 1000))
source('~/Projects/Random Data/bootstrap_growth/boot_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(bootsdata_id)
View(bootsdata_wide)
source('~/Projects/Random Data/bootstrap_growth/boot_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(boot.data_wide)
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(boot.data_wide)
suppressWarnings(cohort_boot(df, nboot = 1000))
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(boot.data_wide)
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(boot.data_wide)
View(boot.data_wide)
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(boot.data_wide)
View(boot.data_wide)
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(boot.data_wide)
View(date.samp)
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(boot.data_wide)
View(date.sub)
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(boot.data_wide)
View(date.samp)
View(date.samp)
View(date.sub)
View(date.sub)
View(date.samp)
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(date.samp)
View(boot.data_wide)
View(date.samp)
names(boot.data_wide)
View(date.samp)
names(boot.data_wide)[k]
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
length(date.sub[,1])
View(boot.data_wide)
View(date.sub)
k
names(boot.data_wide)[k]
unique(levels(allData$date))
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
View(date.sub)
View(date.samp)
View(date.samp)
View(boot.data_wide)
View(boot.data_wide)
source('~/Projects/Random Data/bootstrap_growth/./bootstrap_function.R')
source('~/Projects/Random Data/bootstrap_growth/boot_function.R')
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
#debugonce(cohort_boot)
tic()
suppressWarnings(cohort_boot(df, nboot = 1000))
source('~/Projects/Random Data/bootstrap_growth/boot_function.R')
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
#debugonce(cohort_boot)
tic()
suppressWarnings(cohort_boot(df, nboot = 1000))
source('~/Projects/Random Data/bootstrap_growth/boot_function.R')
source('~/Projects/Random Data/bootstrap_growth/bootstrap_function.R')
source('~/Projects/Random Data/bootstrap_growth/bootstrap_function.R')
source('~/Projects/Random Data/bootstrap_growth/boot_function.R')
suppressWarnings(cohort_boot(df, nboot = 1000))
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
#debugonce(cohort_boot)
tic()
suppressWarnings(cohort_boot(df, nboot = 1000))
toc()
source('~/Projects/Random Data/bootstrap_growth/boot_function.R')
df = read.csv(file = "./infrequensMeasurements.csv",T)
#load in the function
source("./boot_function.R")
#debugonce(cohort_boot)
tic()
suppressWarnings(cohort_boot(df, nboot = 1000))
toc()
#take a look at one example
x = read.csv(file = "./output/infrequens_site-1_IGR.csv",T)
unique(levels(x$start_date))
x_1 = subset(x, site == 1 & start_date == "2017-09-17")
hist(x_1$IGR)
median(x_1$IGR)
quantile(x_1$IGR, c(0.0275,0.975))
site_date = paste(x_1$site,"_",x_1$start_date, sep = "")
df_int = data.frame(site_date = site_date, IGR = x_1$IGR)
f <-  function(u){
which.min(abs(as.numeric(u$vals) - 0.5))
}
ecdf.plot <- function(DATA)
{
x = sort(unique(DATA[,2]))
vals = cumsum(tabulate(match(DATA[,2] , unique(DATA[,2]))))/length(DATA[,2])
df = data.frame(x, vals)
ggplot(df, aes(x = vals, y = x)) + geom_point(size = 3, shape = 19, colour = "#999999") + geom_line(lwd = 1.2) +
labs(x = "Cumulative Frequency", y = "IGR (d-1)") + scale_y_continuous() +
geom_hline(yintercept = as.numeric(df$x[f(df)])) +
annotate("text", x = 0.25, y = 0.2, label = as.character(levels(droplevels(DATA$site_date)))) +
annotate("text", x = 0.25, y = 0.18, label = as.character(paste("igr50 = ",df$x[f(df)], sep = "")))
}
ecdf.plot(df_int)
#need to convert dates into POSIX format
df$Pd = as.POSIXct(df$date, format = "%d-%m-%y")
#just a quick visualization
site5 = df[which(df$Site == "5"),]
ggplot(site5, aes(x = Pd, y = mass, colour = as.factor(Site))) +
geom_point(size =2, position = "jitter")
x = subset(df, Site == "2" & date == "19-11-17")
hist(x$bodySize, breaks = 30)
unique(levels(x$start_date))
#take a look at one example
x = read.csv(file = "./output/infrequens_site-1_IGR.csv",T)
unique(levels(x$start_date))
x_1 = subset(x, site == 1 & start_date == "2017-03-19")
hist(x_1$IGR)
median(x_1$IGR)
quantile(x_1$IGR, c(0.0275,0.975))
site_date = paste(x_1$site,"_",x_1$start_date, sep = "")
df_int = data.frame(site_date = site_date, IGR = x_1$IGR)
f <-  function(u){
which.min(abs(as.numeric(u$vals) - 0.5))
}
ecdf.plot <- function(DATA)
{
x = sort(unique(DATA[,2]))
vals = cumsum(tabulate(match(DATA[,2] , unique(DATA[,2]))))/length(DATA[,2])
df = data.frame(x, vals)
ggplot(df, aes(x = vals, y = x)) + geom_point(size = 3, shape = 19, colour = "#999999") + geom_line(lwd = 1.2) +
labs(x = "Cumulative Frequency", y = "IGR (d-1)") + scale_y_continuous() +
geom_hline(yintercept = as.numeric(df$x[f(df)])) +
annotate("text", x = 0.25, y = 0.2, label = as.character(levels(droplevels(DATA$site_date)))) +
annotate("text", x = 0.25, y = 0.18, label = as.character(paste("igr50 = ",df$x[f(df)], sep = "")))
}
ecdf.plot(df_int)
#take a look at one example
x = read.csv(file = "./output/infrequens_site-1_IGR.csv",T)
unique(levels(x$start_date))
x_1 = subset(x, site == 1 & start_date == "2017-10-15")
hist(x_1$IGR)
median(x_1$IGR)
quantile(x_1$IGR, c(0.0275,0.975))
site_date = paste(x_1$site,"_",x_1$start_date, sep = "")
df_int = data.frame(site_date = site_date, IGR = x_1$IGR)
f <-  function(u){
which.min(abs(as.numeric(u$vals) - 0.5))
}
ecdf.plot <- function(DATA)
{
x = sort(unique(DATA[,2]))
vals = cumsum(tabulate(match(DATA[,2] , unique(DATA[,2]))))/length(DATA[,2])
df = data.frame(x, vals)
ggplot(df, aes(x = vals, y = x)) + geom_point(size = 3, shape = 19, colour = "#999999") + geom_line(lwd = 1.2) +
labs(x = "Cumulative Frequency", y = "IGR (d-1)") + scale_y_continuous() +
geom_hline(yintercept = as.numeric(df$x[f(df)])) +
annotate("text", x = 0.25, y = 0.2, label = as.character(levels(droplevels(DATA$site_date)))) +
annotate("text", x = 0.25, y = 0.18, label = as.character(paste("igr50 = ",df$x[f(df)], sep = "")))
}
ecdf.plot(df_int)
